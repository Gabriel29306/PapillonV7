name: Weekly Expo Build for Android

on:
  schedule:
    - cron: "0 0 * * 1" # Tous les lundis à 00h00 UTC
  workflow_dispatch:
    inputs:
      patch_selection:
        description: "Patchs à appliquer (séparer par des virgules, ou 'all' pour tous)"
        required: false
        default: "all"

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
    # 1. Récupérer le fichier JSON des sources et patchs
    - name: 📥 Fetch Patch List
      id: fetch_patch_list
      run: |
        curl -sL -H "Cache-Control: no-cache, no-store" https://raw.githubusercontent.com/Gabriel29306/datasets/main/papillon_7_patchs.json -o patch_list.json
        echo $(cat patch_list.json)

    # 2. Extraire les informations des sources et patchs
    - name: 🗂 Parse Sources and Patch List
      id: parse_patch_list
      run: |
        echo "Parsing sources and patch list..."
        MAIN_REPO="https://github.com/PapillonApp/Papillon.git"
        ALL_PATCHES=$(jq -r '.patchs | join(",")' patch_list.json)
        echo "MAIN_REPO=$MAIN_REPO" >> $GITHUB_ENV
        echo "ALL_PATCHES=$ALL_PATCHES" >> $GITHUB_ENV

        # Extraire les sources sous forme de paires "nom=url"
        jq -r '.source | to_entries[] | "\(.key)=\(.value)"' patch_list.json > sources.txt

    # 3. Vérifier et choisir les patchs à appliquer
    - name: 🔍 Select Patches
      id: select_patches
      run: |
        PATCH_INPUT="${{ inputs.patch_selection }}"
        if [[ "$PATCH_INPUT" == "all" ]]; then
          SELECTED_PATCHES=$ALL_PATCHES
        else
          SELECTED_PATCHES=$PATCH_INPUT
        fi
        echo "Selected patches: $SELECTED_PATCHES"
        echo "SELECTED_PATCHES=$SELECTED_PATCHES" >> $GITHUB_ENV

    # 4. Cloner le main repo
    - name: 🔧 Clone Main Repository
      run: |
        git clone $MAIN_REPO target-repo
        cd target-repo
        git checkout main

    # 5. Ajout de la configuration Git
    - name: 🔧 Configure Git User
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"

    # 6. Ajouter les upstreams et appliquer les patchs
    - name: 🔧 Add Upstreams and Merge Patches
      run: |
        cd target-repo
        # Ajouter chaque upstream depuis sources.txt
        while IFS='=' read -r NAME URL; do
          echo "Adding remote: $NAME -> $URL"
          git remote add "$NAME" "$URL"
          git fetch "$NAME"
        done < ../sources.txt

        # Appliquer les patchs
        IFS=',' read -ra PATCHES <<< "$SELECTED_PATCHES"
        for PATCH in "${PATCHES[@]}"; do
          # Extraire nom et branche (par exemple : Gabriel29306/branch-name)
          NAME=$(echo "$PATCH" | cut -d'/' -f1)
          BRANCH=$(echo "$PATCH" | cut -d'/' -f2)
          echo "Merging patch: $NAME/$BRANCH"
          git fetch "$NAME" "$BRANCH"
          git merge "$NAME/$BRANCH" --no-commit -s recursive -X theirs || {
            echo "Conflict detected. Forcing merge for patch $PATCH."
            git merge --abort
            git merge "$NAME/$BRANCH" --no-commit -s recursive -X theirs
          }
        done

    # 7. Installer les dépendances
    - name: 📥 Install Dependencies
      run: |
        cd target-repo
        npm ci || npm install

    # 8. Prebuild l'app avec Expo
    - name: ⚙️ Prepare Android Build
      run: |
        cd target-repo
        npx expo prebuild -p android

    # 9. Build les APKs
    - name: 🏗️ Build Release APK
      run: |
        cd target-repo/android
        ./gradlew :app:assembleRelease

    - uses: actions/upload-artifact@v4
      with:
        path: target-repo/android/app/build/outputs/apk/release/*.apk

    # 10. Publier les APKs
    - name: 📤 Publish APKs
      if: ${{ false }}
      uses: ncipollo/release-action@v1
      with:
        tag: "weekly-build"
        name: "Weekly Build"
        body: "Build automatique hebdomadaire pour Android."
        prerelease: true
        artifacts: |
          target-repo/android/app/build/outputs/apk/release/*.apk
