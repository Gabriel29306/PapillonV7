name: Weekly Expo Build for Android

on:
  schedule:
    - cron: "0 12 * * 1" # Tous les lundis à 12h UTC
  workflow_dispatch: # Permet d'exécuter manuellement le workflow

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
    # 1. Récupérer le code depuis le repo cible
    - name: Checkout Action Repository
      uses: actions/checkout@v3
    
    # 2. Configurer Java 17
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # Distribution Temurin (privilégiée)
        java-version: '17'
      
    # 3. Télécharger le repo Papillon
    - name: Checkout Target Repository
      run: |
        git clone https://github.com/PapillonApp/Papillon.git target-repo
        cd target-repo
        git checkout main

    # 4. Installer les dépendances et builder
    - name: Install Dependencies
      run: |
        cd target-repo
        npm install

    # 5. Prebuil l'app avec Expo
    - name: Prepare Android Build
      run: |
        cd target-repo
        npx expo prebuild -p android
  
    # 6. Configurer gradle.properties pour générer des APKs par architecture
    - name: Configure Build Gradle for Split APKs
      run: |
        sed -i '/android {/a \
        splits { \
            abi { \
                enable true \
                reset() \
                include "armeabi-v7a", "arm64-v8a", "x86", "x86_64" \
                universalApk true \
            } \
        }' target-repo/android/app/build.gradle

    # 7. Obtension de la dernière version postée, ou 7.7.0
    - name: Get Latest Release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const tagVersion = parseInt(latestRelease.data.tag_name, 10);
            if (isNaN(tagVersion)) {
              console.log("Invalid tag found. Using default versionCode 7601.");
              core.setOutput("versionCode", 7601);
            } else {
              console.log(`Latest version code: ${tagVersion}`);
              core.setOutput("versionCode", tagVersion);
            }
          } catch (error) {
            console.log("No release found. Using default versionCode 7601.");
            core.setOutput("versionCode", 7601);
          }
    
    # 8. Incrémentation de la version
    - name: Increment Version Based on Release
      run: |
        cd target-repo
        # Récupérer la version du tag
        BASE_VERSION="${{ steps.get_latest_release.outputs.version }}"
        echo "Base version: ${BASE_VERSION}"

        # Rechercher la versionCode actuelle ou utiliser 1 par défaut
        CURRENT_VERSION=$(grep -oP '(?<=versionCode )\d+' android/app/build.gradle || echo "1")
        echo "Current versionCode: ${CURRENT_VERSION}"

        # Calculer la nouvelle version
        NEW_VERSION=$((CURRENT_VERSION + 1))
        echo "New versionCode: ${NEW_VERSION}"

        # Mettre à jour versionCode dans build.gradle
        sed -i "s/versionCode [0-9]*/versionCode ${NEW_VERSION}/" android/app/build.gradle

        # Vérification de la modification
        grep "versionCode" android/app/build.gradle
        echo "VERSION_CODE=${NEW_VERSION}" >> $GITHUB_ENV
  
    # 9. Build des apks
    - name: Build Release APK
      run: |
        cd target-repo/android
        ./gradlew :app:assembleRelease
    
    # 10. Renommer les apks
    - name: Rename apks
      run: |
        cd target-repo/android/app/build/outputs/apk/release/
        mv app-arm64-v8a-release.apk Papillon-arm64-v8a-release.apk
        mv app-armeabi-v7a-release.apk Papillon-armeabi-v7a-release.apk
        mv app-universal-release.apk Papillon-universal-release.apk
        mv app-x86-release.apk Papillon-x86-release.apk
        mv app-x86_64-release.apk Papillon-x86_64-release.apk

    # 11. Publier les APKs dans une préversion
    - name: Create Pre-Release with APKs
      uses: ncipollo/release-action@v1
      with:
        tag: "${{ env.VERSION_CODE }}"
        name: "Weekly Build v${{ steps.get_latest_release.outputs.version }}"
        body: "Build automatique hebdomadaire pour Android."
        prerelease: true
        artifacts: |
          target-repo/android/app/build/outputs/apk/release/*.apk
